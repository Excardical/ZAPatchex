[
    {
        "title": "Missing Anti-clickjacking Header",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "simplified_description": "Your website can be tricked into appearing inside a hidden frame on a malicious website, like putting your house window inside someone else's window so they can trick people into clicking on your stuff without knowing it.",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "simplified_solution": "Add a security header to your web pages that tells browsers whether your site can be displayed inside frames on other websites, preventing clickjacking attacks.",
        "code_solution_sample": {
            "solution_description": "This code adds the X-Frame-Options header to all HTTP responses, which instructs browsers to either deny framing entirely (DENY) or only allow framing from the same origin (SAMEORIGIN). This prevents malicious websites from embedding your pages in hidden frames.",
            "affected_files": "This is usually found in server configuration files, web server settings (like Apache/Nginx), or in application middleware where HTTP security headers are configured.",
            "code": "// Node.js/Express example\nconst express = require('express');\nconst app = express();\n\n// Add X-Frame-Options header to prevent clickjacking\napp.use((req, res, next) => {\n  // DENY: Prevents any domain from framing the content\n  // SAMEORIGIN: Only allows framing from the same domain\n  res.setHeader('X-Frame-Options', 'DENY');\n  next();\n});\n\n// Alternative: Using Content Security Policy\napp.use((req, res, next) => {\n  // frame-ancestors 'none' is equivalent to X-Frame-Options: DENY\n  res.setHeader('Content-Security-Policy', \"frame-ancestors 'none'\");\n  next();\n});"
        }
    }
]