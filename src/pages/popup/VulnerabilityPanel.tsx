import React, { useState } from 'react';

// Define the structure of a single Alert object from the ZAP API
export interface Alert {
  name: string;
  description: string;
  solution: string;
  url: string;
  risk: 'High' | 'Medium' | 'Low' | 'Informational';
  confidence: 'High' | 'Medium' | 'Low' | 'False Positive';
  param: string;
  evidence: string;
  cweid?: string; // Common Weakness Enumeration ID
  wascid?: string; // Web Application Security Consortium ID
}

// Define the props for the VulnerabilityPanel component
interface VulnerabilityPanelProps {
  alerts: Alert[];
}

export const VulnerabilityPanel: React.FC<VulnerabilityPanelProps> = ({ alerts }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const alert = alerts[currentIndex];

  const handleNext = () => {
    setCurrentIndex((prev) => Math.min(prev + 1, alerts.length - 1));
  };

  const handlePrevious = () => {
    setCurrentIndex((prev) => Math.max(prev - 1, 0));
  };

  // Helper to get color based on risk level
  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'High': return 'text-red-500';
      case 'Medium': return 'text-yellow-500';
      case 'Low': return 'text-blue-400';
      case 'Informational': return 'text-green-500';
      default: return 'text-gray-400';
    }
  };
  
  // A reusable component for displaying details
  const DetailItem = ({ label, value }: { label: string; value?: string }) => {
    if (!value) return null;
    return (
      <div className="mb-2">
        <strong className="text-blue-400">{label}:</strong>
        <span className="text-gray-300 ml-2 break-words">{value}</span>
      </div>
    );
  };

  return (
    <div className="w-full h-full flex flex-col p-4 bg-gray-900 text-white">
      {/* Fixed Header */}
      <header className="flex-shrink-0 pb-2 border-b border-gray-700">
        <div className="flex items-center justify-between">
            <div className="flex items-center">
                <img src="/public/OWASP_ZAP_Logo.png" alt="ZAP Logo" className="w-8 h-8 mr-2" />
                <span className="text-xl font-bold">ZAPatchex</span>
            </div>
            <div className="flex items-center">
                <button className="p-1 hover:bg-gray-700 rounded-md" title="Go to ZAP"><svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" /></svg></button>
                <button className="p-1 hover:bg-gray-700 rounded-md ml-1" title="Refresh"><svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h5M20 20v-5h-5M20 4l-5 5M4 20l5-5" /></svg></button>
            </div>
        </div>
        <h2 className="text-lg font-semibold text-center mt-2 truncate" title={alert.name}>{alert.name}</h2>
      </header>

      {/* Scrollable Main Content */}
      <main className="flex-grow overflow-y-auto py-2 text-sm">
        <div className="mb-3">
            <DetailItem label="Risk" value={alert.risk} />
            <DetailItem label="Confidence" value={alert.confidence} />
            <DetailItem label="URL" value={alert.url} />
            <DetailItem label="Parameter" value={alert.param} />
            <DetailItem label="Evidence" value={alert.evidence} />
            <DetailItem label="CWE ID" value={alert.cweid} />
            <DetailItem label="WASC ID" value={alert.wascid} />
        </div>
        
        <div className="mb-3">
            <h4 className="text-md font-bold mb-1 text-blue-400">Description</h4>
            <p className="whitespace-pre-wrap">{alert.description}</p>
        </div>

        <div>
            <h4 className="text-md font-bold mb-1 text-blue-400">Solution</h4>
            <p className="whitespace-pre-wrap">{alert.solution}</p>
        </div>
      </main>

      {/* Fixed Footer */}
      <footer className="flex-shrink-0 flex items-center justify-between pt-2 border-t border-gray-700">
        <button onClick={handlePrevious} disabled={currentIndex === 0} className="w-auto p-2 rounded-md disabled:opacity-25 hover:enabled:bg-gray-700">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path></svg>
        </button>
        <span className="text-sm font-medium">{currentIndex + 1} / {alerts.length}</span>
        <button onClick={handleNext} disabled={currentIndex === alerts.length - 1} className="w-auto p-2 rounded-md disabled:opacity-25 hover:enabled:bg-gray-700">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path></svg>
        </button>
      </footer>
    </div>
  );
};