import React, { useState, useEffect } from 'react';
import { CodeSolutionPanel } from './CodeSolutionPanel';
import { InfoTooltip } from './InfoTooltip';

// Define the structure of a single Alert object from the ZAP API
export interface Alert {
  name: string;
  description: string;
  solution: string;
  url: string;
  risk: 'High' | 'Medium' | 'Low' | 'Informational';
  confidence: 'High' | 'Medium' | 'Low' | 'False Positive';
  param: string;
  evidence: string;
  cweid?: string; // Common Weakness Enumeration ID
  wascid?: string; // Web Application Security Consortium ID
}

// Define the structure for an individual alert occurrence
export interface AlertInstance {
  url: string;
  param: string;
  evidence: string;
}

// Define the new structure for a grouped alert
export interface GroupedAlert {
  name: string;
  description: string;
  solution: string;
  risk: 'High' | 'Medium' | 'Low' | 'Informational';
  confidence: 'High' | 'Medium' | 'Low' | 'False Positive';
  cweid?: string;
  wascid?: string;
  instances: AlertInstance[];
}

// Define the props for the VulnerabilityPanel component
interface VulnerabilityPanelProps {
  alerts: GroupedAlert[];
}

export interface CodeSolution {
  solution_description: string;
  affected_files: string;
  code: string;
}

interface VulnerabilityTemplate {
  title: string;
  simplified_description: string;
  simplified_solution: string;
  code_solution_sample?: CodeSolution; // Optional in case a template has no code
}

// A simple modal component to display all URLs
const UrlListModal: React.FC<{ instances: AlertInstance[], onClose: () => void }> = ({ instances, onClose }) => {
  return (
    <div className="absolute inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
      <div className="bg-slate-800 p-4 rounded-lg w-full max-w-md max-h-[90%] flex flex-col shadow-lg border border-slate-700">
        <h3 className="text-lg font-bold mb-3 text-cyan-300 border-b border-slate-600 pb-2">Affected URLs</h3>
        <ul className="flex-grow overflow-y-auto pr-2">
          {instances.map((instance, index) => (
            <li key={index} className="mb-2 p-2 bg-slate-700 rounded text-xs break-all shadow-sm">
              <p className="font-semibold text-slate-300">URL:</p>
              <p className="text-slate-400">{instance.url}</p>
              {instance.param && <p className="mt-1"><span className="font-semibold text-slate-300">Param:</span> <span className="text-slate-400">{instance.param}</span></p>}
            </li>
          ))}
        </ul>
        <button
          onClick={onClose}
          className="mt-4 w-full p-2.5 border-none rounded bg-cyan-600 text-white text-sm font-semibold cursor-pointer transition-colors hover:bg-cyan-700">
          Close
        </button>
      </div>
    </div>
  );
};

export const VulnerabilityPanel: React.FC<VulnerabilityPanelProps> = ({ alerts }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isUrlsVisible, setUrlsVisible] = useState(false);
  const [showSimplifiedDesc, setShowSimplifiedDesc] = useState(false);
  const [showSimplifiedSol, setShowSimplifiedSol] = useState(false);
  const [showCodeSolution, setShowCodeSolution] = useState(false);
  const [templates, setTemplates] = useState<VulnerabilityTemplate[]>([]);
  const alert = alerts[currentIndex];
  const primaryInstance = alert.instances[0];

  useEffect(() => {
    fetch(chrome.runtime.getURL('vulnerability_templates.json'))
      .then((response) => response.json())
      .then((data) => setTemplates(data))
      .catch((error) => console.error("Failed to load vulnerability templates:", error));
  }, []);

  const handleNext = () => {
    setUrlsVisible(false);
    setShowCodeSolution(false);
    setCurrentIndex((prev) => Math.min(prev + 1, alerts.length - 1));
  };

  const handlePrevious = () => {
    setUrlsVisible(false);
    setShowCodeSolution(false);
    setCurrentIndex((prev) => Math.max(prev - 1, 0));
  };

  const DetailItem = ({ label, value, tooltipText }: { label: string; value?: string; tooltipText?: string }) => {
    if (!value) return null;
    return (
      <div className="flex items-start">
        <div className="flex items-center w-24 flex-shrink-0">
          <strong className="text-cyan-400 font-medium">{label}:</strong>
          {tooltipText && <InfoTooltip text={tooltipText} />}
        </div>
        <span className="text-slate-300 break-all">{value}</span>
      </div>
    );
  };
  
  const template: VulnerabilityTemplate | undefined = templates.find(
    (t) => t.title === alert.name
  );

  if (showCodeSolution && template?.code_solution_sample) {
    return (
      <CodeSolutionPanel
        solution={template.code_solution_sample}
        onBack={() => setShowCodeSolution(false)}
      />
    );
  }

  return (
    <div className="w-full h-full flex flex-col p-3 bg-slate-900 text-slate-200 relative">
      {isUrlsVisible && <UrlListModal instances={alert.instances} onClose={() => setUrlsVisible(false)} />}

      <header className="flex-shrink-0 pb-2 border-b border-slate-700">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <img src="OWASP_ZAP_Logo.png" alt="ZAP Logo" className="w-7 h-7" />
            <span className="text-lg font-bold">ZAPatchex</span>
          </div>
          <div className="flex items-center gap-1">
            <button className="p-1.5 text-slate-400 hover:text-white hover:bg-slate-700 rounded-md" title="Go to ZAP">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                <path strokeLinecap="round" strokeLinejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-4.5 0V6.375c0-.621.504-1.125 1.125-1.125h4.125c.621 0 1.125.504 1.125 1.125V10.5m-4.5 0h4.5m-4.5 0L6.75 6.75" />
              </svg>
            </button>
            <button className="p-1.5 text-slate-400 hover:text-white hover:bg-slate-700 rounded-md" title="Refresh">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                <path strokeLinecap="round" strokeLinejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0011.667 0l3.181-3.183m-4.991-2.828a8.25 8.25 0 00-11.667 0l-3.181 3.183" />
              </svg>
            </button>
          </div>
        </div>
        <h2 className="text-md font-semibold text-center mt-2 truncate text-slate-300" title={alert.name}>{alert.name}</h2>
      </header>

      <main className="flex-grow overflow-y-auto py-2 text-sm space-y-3">

        <div className="bg-slate-800 p-3 rounded-lg space-y-1 text-xs">
          <div className="grid grid-cols-2 gap-x-4 gap-y-1">
            <DetailItem label="Risk" value={alert.risk} />
            <DetailItem label="Confidence" value={alert.confidence} tooltipText="The level of confidence in the accuracy of the finding." />
            <DetailItem label="CWE ID" value={alert.cweid} />
            <DetailItem label="WASC ID" value={alert.wascid} />
          </div>
          <hr className="border-slate-700 my-2" />
          <div className="flex items-start">
            <strong className="text-cyan-400 font-medium w-24 flex-shrink-0">URL:</strong>
            <span className="text-slate-300 break-all">{primaryInstance.url}</span>
            {alert.instances.length > 1 && (
              <button onClick={() => setUrlsVisible(true)} className="ml-2 text-cyan-400 hover:underline text-xs font-semibold flex-shrink-0">
                ({alert.instances.length - 1} more)
              </button>
            )}
          </div>
          <DetailItem label="Parameter" value={primaryInstance.param} tooltipText="The parameter (e.g., in a URL query string or form) associated with the vulnerability."/>
          <DetailItem label="Evidence" value={primaryInstance.evidence} tooltipText="A piece of data or response snippet that indicates the presence of the vulnerability."/>
        </div>

        <div className="bg-slate-800 p-3 rounded-lg">
          <div className="flex items-center justify-between mb-1.5">
            <h4 className="text-md font-bold text-cyan-400">Description</h4>
            {template?.simplified_description && (
              <div className="flex items-center text-xs border border-slate-600 rounded-md p-0.5">
                <button onClick={() => setShowSimplifiedDesc(false)} className={`px-2 py-0.5 rounded-sm ${!showSimplifiedDesc ? 'bg-cyan-600' : 'hover:bg-slate-700'}`}>Standard</button>
                <button onClick={() => setShowSimplifiedDesc(true)} className={`px-2 py-0.5 rounded-sm ${showSimplifiedDesc ? 'bg-cyan-600' : 'hover:bg-slate-700'}`}>Simplified</button>
              </div>
            )}
          </div>
          <p className="whitespace-pre-wrap text-xs text-slate-300">
            {showSimplifiedDesc ? template?.simplified_description : alert.description}
          </p>
        </div>

        <div className="bg-slate-800 p-3 rounded-lg">
          <div className="flex items-center justify-between mb-1.5">
            <h4 className="text-md font-bold text-cyan-400">Solution</h4>
            {template?.simplified_solution && (
              <div className="flex items-center text-xs border border-slate-600 rounded-md p-0.5">
                <button onClick={() => setShowSimplifiedSol(false)} className={`px-2 py-0.5 rounded-sm ${!showSimplifiedSol ? 'bg-cyan-600' : 'hover:bg-slate-700'}`}>Standard</button>
                <button onClick={() => setShowSimplifiedSol(true)} className={`px-2 py-0.5 rounded-sm ${showSimplifiedSol ? 'bg-cyan-600' : 'hover:bg-slate-700'}`}>Simplified</button>
              </div>
            )}
          </div>
          <p className="whitespace-pre-wrap text-xs text-slate-300">
            {showSimplifiedSol ? template?.simplified_solution : alert.solution}
          </p>
        </div>

        {template?.code_solution_sample && (
          <button
            onClick={() => setShowCodeSolution(true)}
            className="w-full mt-1 p-2 rounded bg-teal-600 text-white text-sm font-semibold cursor-pointer transition-colors hover:enabled:bg-teal-700"
          >
            View Code Solution
          </button>
        )}
      </main>

      <footer className="flex-shrink-0 flex items-center justify-between pt-2 border-t border-slate-700">
        <button onClick={handlePrevious} disabled={currentIndex === 0} className="w-auto p-2 rounded-md disabled:opacity-25 hover:enabled:bg-slate-700">
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path></svg>
        </button>
        <span className="text-xs font-medium">{currentIndex + 1} / {alerts.length}</span>
        <button onClick={handleNext} disabled={currentIndex === alerts.length - 1} className="w-auto p-2 rounded-md disabled:opacity-25 hover:enabled:bg-slate-700">
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path></svg>
        </button>
      </footer>
    </div>
  );
};