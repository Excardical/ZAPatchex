import React, { useState, useEffect } from 'react';
import Browser from 'webextension-polyfill';

// --- ZAP API Helper Functions ---

/**
 * Starts the ZAP Spider to crawl a given URL.
 * The passive scanner will automatically analyze the traffic generated by the spider.
 */
const startSpiderScan = async (host: string, apiKey: string, targetUrl: string): Promise<{ scan: string }> => {
  const url = new URL(`${host}/JSON/spider/action/scan/`);
  url.searchParams.append('apikey', apiKey);
  url.searchParams.append('url', targetUrl);
  url.searchParams.append('recurse', 'true');

  const response = await fetch(url.toString(), { method: 'GET' });
  if (!response.ok) throw new Error(`Spider start failed: ${response.statusText}`);
  const data = await response.json();
  if (!data.scan) throw new Error(`Spider start failed: Unexpected response format ${JSON.stringify(data)}`);
  console.log("Spider started:", data);
  return { scan: data.scan };
};

/**
 * Checks the status of a running Spider scan.
 */
const checkSpiderStatus = async (host: string, apiKey: string, scanId: string): Promise<number> => {
  const url = new URL(`${host}/JSON/spider/view/status/`);
  url.searchParams.append('apikey', apiKey);
  url.searchParams.append('scanId', scanId);

  const response = await fetch(url.toString(), { method: 'GET' });
  if (!response.ok) throw new Error(`Failed to get Spider status: ${response.statusText}`);
  const data = await response.json();
  if (!data.status) throw new Error(`Failed to get Spider status: Unexpected response format ${JSON.stringify(data)}`);
  return parseInt(data.status, 10);
};


/**
 * Starts an Active Scan on a given URL.
 */
const startActiveScan = async (host: string, apiKey: string, targetUrl: string): Promise<{ scan: string }> => {
  const url = new URL(`${host}/JSON/ascan/action/scan/`);
  url.searchParams.append('apikey', apiKey);
  url.searchParams.append('url', targetUrl);
  url.searchParams.append('recurse', 'true');
  url.searchParams.append('inScopeOnly', 'false');

  const response = await fetch(url.toString(), { method: 'GET' });
  if (!response.ok) throw new Error(`Active Scan start failed: ${response.statusText}`);
  const data = await response.json();
  if (!data.scan) throw new Error(`Active Scan start failed: Unexpected response format ${JSON.stringify(data)}`);
  console.log("Active Scan started:", data);
  return { scan: data.scan };
};

/**
 * Checks the status of a running Active Scan.
 */
const checkActiveScanStatus = async (host: string, apiKey: string, scanId: string): Promise<number> => {
  const url = new URL(`${host}/JSON/ascan/view/status/`);
  url.searchParams.append('apikey', apiKey);
  url.searchParams.append('scanId', scanId);

  const response = await fetch(url.toString(), { method: 'GET' });
  if (!response.ok) throw new Error(`Failed to get scan status: ${response.statusText}`);
  const data = await response.json();
  if (!data.status) throw new Error(`Failed to get scan status: Unexpected response format ${JSON.stringify(data)}`);
  return parseInt(data.status, 10);
};


interface ZapScannerPanelProps {
  host: string;
  apiKey: string;
  onScanComplete: () => void;
}

export const ZapScannerPanel: React.FC<ZapScannerPanelProps> = ({ host, apiKey, onScanComplete }) => {
  const [targetUrl, setTargetUrl] = useState<string>('');
  const [scanStatusMessage, setScanStatusMessage] = useState<string>('');
  const [scanId, setScanId] = useState<string | null>(null);
  const [scanType, setScanType] = useState<'spider' | 'active' | null>(null);
  const [scanProgress, setScanProgress] = useState<number | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const getCurrentTabUrl = async () => {
      try {
        if (Browser.tabs) {
          const tabs = await Browser.tabs.query({ active: true, currentWindow: true });
          if (tabs[0]?.url && tabs[0].url.startsWith('http')) {
            setTargetUrl(tabs[0].url);
          } else {
            setScanStatusMessage("Current tab is not a scannable URL. Please enter one manually.");
          }
        }
      } catch (err) {
        console.error("Error getting current tab URL:", err);
        setScanStatusMessage("Could not get current tab URL. Enter manually.");
      }
    };
    getCurrentTabUrl();
  }, []);

  useEffect(() => {
    let intervalId: NodeJS.Timeout | null = null;

    if (scanId && scanProgress !== null && scanProgress < 100) {
      intervalId = setInterval(async () => {
        try {
          const checkStatus = scanType === 'spider' ? checkSpiderStatus : checkActiveScanStatus;
          const progress = await checkStatus(host, apiKey, scanId);
          setScanProgress(progress);
          const friendlyScanType = scanType === 'spider' ? 'Spider' : 'Active Scan';
          setScanStatusMessage(`${friendlyScanType} in progress: ${progress}%`);

          if (progress >= 100) {
            setScanStatusMessage(`${friendlyScanType} Complete! âœ…`);
            setScanId(null);
            setIsLoading(false);
            setTimeout(onScanComplete, 1500);
          }
        } catch (err) {
          const errorMessage = err instanceof Error ? err.message : 'Failed to check scan status.';
          console.error(`Error checking ${scanType} status:`, err);
          setError(errorMessage);
          setScanId(null);
          setIsLoading(false);
        }
      }, 3000); // Poll every 3 seconds
    }

    return () => {
      if (intervalId) clearInterval(intervalId);
    };
  }, [scanId, scanProgress, scanType, host, apiKey, onScanComplete]);

  const resetState = () => {
      setError(null);
      setScanId(null);
      setScanProgress(null);
      setScanStatusMessage('');
  }

  const handleSpiderScan = async () => {
    if (!targetUrl.trim()) {
      setError("Target URL is required.");
      return;
    }
    resetState();
    setIsLoading(true);
    setScanType('spider');
    setScanStatusMessage('Starting Spider...');
    try {
      const { scan } = await startSpiderScan(host, apiKey, targetUrl);
      setScanId(scan);
      setScanProgress(0);
      setScanStatusMessage('Spider started. Progress: 0%');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to start Spider scan.';
      console.error("Error starting spider scan:", err);
      setError(errorMessage);
      setScanStatusMessage('');
      setIsLoading(false);
    }
  };

  const handleActiveScan = async () => {
     if (!targetUrl.trim()) {
      setError("Target URL is required.");
      return;
    }
    resetState();
    setIsLoading(true);
    setScanType('active');
    setScanStatusMessage('Starting Active Scan...');
    try {
      const { scan } = await startActiveScan(host, apiKey, targetUrl);
      setScanId(scan);
      setScanProgress(0);
      setScanStatusMessage('Active Scan started. Progress: 0%');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to start active scan.';
      console.error("Error starting active scan:", err);
      setError(errorMessage);
      setScanStatusMessage('');
      setIsLoading(false);
    }
  };

  return (
    <div className="font-sans w-[450px] h-[550px] bg-slate-900 text-slate-200 p-4 flex flex-col">
      <header className="flex-shrink-0 pb-2 border-b border-slate-700 mb-4">
        <div className="flex items-center gap-2 mb-2">
           <img src="OWASP_ZAP_Logo.png" alt="ZAP Logo" className="w-7 h-7" />
           <span className="text-lg font-bold">ZAP Scanner</span>
         </div>
      </header>

      <main className="flex-grow space-y-4">
        <div>
          <label htmlFor="targetUrl" className="block text-sm font-semibold mb-1 text-cyan-400">Target URL</label>
          <input
            type="text"
            id="targetUrl"
            value={targetUrl}
            onChange={(e) => setTargetUrl(e.target.value)}
            placeholder="https://example.com"
            disabled={isLoading}
            className="box-border w-full p-2 rounded border border-slate-700 bg-slate-800 text-slate-200 text-sm focus:outline-none focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500"
          />
        </div>

        <div className="flex gap-4">
          <button
            onClick={handleSpiderScan}
            disabled={isLoading}
            className="flex-1 p-2.5 border-none rounded bg-blue-600 text-white text-sm font-semibold cursor-pointer transition-colors hover:enabled:bg-blue-700 disabled:bg-slate-600 disabled:cursor-not-allowed"
          >
            Spider Scan
          </button>
          <button
            onClick={handleActiveScan}
            disabled={isLoading}
            className="flex-1 p-2.5 border-none rounded bg-red-600 text-white text-sm font-semibold cursor-pointer transition-colors hover:enabled:bg-red-700 disabled:bg-slate-600 disabled:cursor-not-allowed"
          >
            Active Scan
          </button>
        </div>

         {scanStatusMessage && (
          <div className="mt-4 p-3 rounded bg-slate-800 text-center text-sm">
            <p className="font-medium">{scanStatusMessage}</p>
             {scanProgress !== null && scanProgress < 100 && (
                 <div className="w-full bg-slate-700 rounded-full h-2.5 mt-2 overflow-hidden">
                   <div className="bg-cyan-600 h-2.5 rounded-full transition-all duration-300" style={{ width: `${scanProgress}%` }}></div>
                 </div>
               )}
          </div>
        )}

        {error && (
          <div className="mt-4 p-3 rounded bg-red-900/50 text-red-300 border border-red-700 text-center text-sm">
            <p className="font-bold mb-1">An Error Occurred</p>
            <p className="text-xs">{error}</p>
          </div>
        )}
      </main>

       <footer className="flex-shrink-0 mt-4 pt-2 border-t border-slate-700 text-center">
         <button
            onClick={onScanComplete}
            disabled={isLoading}
            className="w-full p-2.5 border-none rounded bg-teal-600 text-white text-sm font-semibold cursor-pointer transition-colors hover:enabled:bg-teal-700 disabled:bg-slate-600 disabled:cursor-not-allowed"
          >
            {isLoading ? 'Scan in Progress...' : 'View Last Scan Results'}
         </button>
       </footer>
    </div>
  );
};

